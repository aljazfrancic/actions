name: "Compose openDAQ framework file name"
description: "Resolves artifact filename from pattern, inputs, or autodetect."

inputs:
  pattern:
    description: "Glob/wildcard pattern for artifact name (optional)"
    required: false
    default: "opendaq-*-*.*"

  version:
    description: "Version to use if not in pattern (optional)"
    required: false
  platform-alias:
    description: "Platform alias to use if not in pattern (optional)"
    required: false
  packaging:
    description: "Packaging type to determine file extension if not in pattern (optional, NSIS/ZIP/DEB/TARGZ)"
    required: false

outputs:
  filename:
    description: "Resolved artifact filename"
  version:
    description: "Resolved version"
  platform-alias:
    description: "Resolved platform alias"
  file-ext:
    description: "Resolved file extension"

runs:
  using: "composite"
  steps:
    - name: Parse pattern
      id: parse-pattern
      shell: bash
      env:
        pattern: ${{ inputs.pattern }}
      run: |
        if [[ ! "$pattern" != opendaq-*-*.* ]]; then
          echo "‚ùå Invalid pattern format: ${PATTERN}"
          cat <<EOF
          üí° Hint: Input 'pattern' must be either empty or match the format: opendaq-*-*.*

          Where:
            - first *  ‚Üí version in format MAJOR.MINOR.PATCH (e.g. 3.20.4)
            - second * ‚Üí platform alias (e.g. ubuntu22.04-x86_64, ubuntu22.04-arm64, win32, win64, etc.)
            - third *  ‚Üí file extension (e.g. exe, deb, etc.)
          EOF
          exit 1
        fi

        rest="${pattern#opendaq-}"
        base="${rest%.*}"

        version="${base%%-*}"
        platform="${base#*-}"
        ext="${rest##*.}"

        echo "version=$version" >> "$GITHUB_OUTPUT"
        echo "platform-alias=$platform" >> "$GITHUB_OUTPUT"
        echo "ext=$ext" >> "$GITHUB_OUTPUT"

    - name: Validate requested version
      id: validate-framework-version
      shell: bash
      env:
        VERSION: ${{ steps.parse-pattern.outputs.version || intputs.version }}
      run: |
        version_name=

        if [[ $VERSION == "latest"]]; then
          version_name='latest'
        elif [[ "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          version_name="${VERSION#v}"
        else
          echo "‚ùå Invalid version format: $VERSION"
          cat <<EOF
          üí° Hint: Use either of input arguments to resolve a particular framework version:
              - pattern="opendaq-X.XX.X-*.*"
              - version="vX.XX.X"

          üí° Hint: Use either of input arguments to resolve the latest framework version automatically:
              - pattern="opendaq-*-*.*"
              - version=latest (or leave it empty)
          EOF
          exit 1
        fi

        echo "version-name=$version_name" >> "$GITHUB_OUTPUT"

    - name: Resolve version
      id: resolve-version
      shell: bash
      env:
        VALID_VERSION_NAME: ${{ validate-framework-version.outputs.version-name || 'latest' }}
      run: |
        version=
        tag=
        
        if [[ "$VALID_VERSION_NAME" == "latest" ]]; then
          tag=$(gh release view "latest" --repo openDAQ/openDAQ --json tagName -q '.tagName')
          version="${tag#v}"
        else
          version="${VALID_VERSION_NAME#v}"
          tag="v$version"
        fi

        if [[ -z "$version" ]]; then
          echo "‚ùå Resolved version is empty"
          exit 1
        fi

        IFS='.' read -r major minor patch <<< "$version"

        if [[ -z "$major" || -z "$minor" || -z "$patch" ]]; then
          echo "‚ùå Failed to parse version into major.minor.patch"
          exit 1
        fi

        echo "version=$version" >> "$GITHUB_OUTPUT"
        echo "version-tag=$tag" >> "$GITHUB_OUTPUT"
        echo "version-major=$major" >> "$GITHUB_OUTPUT"
        echo "version-minor=$minor" >> "$GITHUB_OUTPUT"
        echo "version-patch=$patch" >> "$GITHUB_OUTPUT"

    - name: Validate platform alias
      id: validate-platform-alias
      shell: bash
      env:
        PLATFORM_ALIAS: ${{ steps.parse-pattern.outputs.platform-alias || inputs.platform-alias }}
        PLATFORM_OS: ${{ github.runner.os.toLowerCase() }}
        PLATFORM_ARCH: ${{ github.runner.arch.toLowerCase() }}
      run: |
        alias="$PLATFORM_ALIAS"

        if [[ -z "$alias" || "$alias" =~ ^(win32|win64|ubuntu[0-9]+\.[0-9]+-(x86_64|arm64)|macos[0-9]+-(x86_64|arm64))$ ]]; then
          echo "platform-alias=$alias" >> "$GITHUB_OUTPUT"
        else
          echo "‚ùå Invalid platform-alias in pattern/input: $alias" >&2
          exit 1
        fi

    - name: Resolve platform alias
      id: resolve-platform-alias
      shell: bash
      env:
        PLATFORM_ALIAS: ${{ steps.parse-pattern.outputs.platform-alias || inputs.platform-alias }}
        PLATFORM_OS: ${{ github.runner.os.toLowerCase() }}
        PLATFORM_ARCH: ${{ github.runner.arch.toLowerCase() }}
      run: |
        alias="$PLATFORM_ALIAS"

        # –ï—Å–ª–∏ PATTERN_ALIAS —É–∫–∞–∑–∞–Ω ‚Üí —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if [[ -n "$alias" ]]; then
          echo "platform-alias=$alias" >> "$GITHUB_OUTPUT"
          echo "platform-os=${PLATFORM_OS}" >> "$GITHUB_OUTPUT"
          echo "platform-arch=${PLATFORM_ARCH}" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        case "$PLATFORM_ARCH" in
          x64|amd64) PLATFORM_ARCH="x86_64" ;;
          arm64|aarch64) PLATFORM_ARCH="arm64" ;;
          *) 
            echo "‚ùå Unsupported architecture for $PLATFORM_OS: $PLATFORM_ARCH" >&2
            exit 1
            ;;
        esac

        case "$PLATFORM_OS" in
          linux)
            ubuntu_ver="22.04"
            if [[ -f /etc/os-release ]]; then
              . /etc/os-release || true
              if [[ "${VERSION_ID:-}" =~ ^24 ]]; then ubuntu_ver="24.04"; fi
              if [[ "${VERSION_ID:-}" =~ ^22 ]]; then ubuntu_ver="22.04"; fi
            fi
            alias="ubuntu${ubuntu_ver}-${PLATFORM_ARCH}"
            ;;
          macos)
            mac_major="13"
            if command -v sw_vers >/dev/null 2>&1; then
              mac_major="$(sw_vers -productVersion | cut -d. -f1)"
            fi
            alias="macos${mac_major}-${PLATFORM_ARCH}"
            ;;
          windows) alias=win64;;
          *)
            echo "‚ùå Unsupported runner OS: $PLATFORM_OS" >&2
            exit 1
        esac
      
        echo "platform-alias=$alias" >> "$GITHUB_OUTPUT"

    - name: Validate package file extension
      id: validate-package-ext
      shell: bash
      env:
        PACKAGING: ${{ steps.parse-pattern.outputs.ext || inputs.packaging }}
      run: |
        ext="$PACKAGING"
        if [[ -n "$PACKAGING" ]]; then
          case "$PACKAGING" in 
            exe|EXE|NSIS) ext='exe' ;;
            tar.gz|tgz|TARGZ) ext='tar.gz' ;;
            zip|ZIP) ext='zip' ;;
            deb|DEB) ext='deb' ;;
            *) exit 1 ;;
          esac
        fi

        echo "file-ext=$ext" >> "$GITHUB_OUTPUT"

    - name: Resolve package file extension
      id: resolve-package-ext
      shell: bash
      env:
        PACKAGING: ${{ steps.validate-package-ext.outputs.ext }}
        CURRENT_OS: ${{ github.runner.os.toLowerCase() }}
      run: |
        ext="$PACKAGING"
        if [[ -z "$PACKAGING" ]]; then
          case "$CURRENT_OS" in
            linux) ext='deb' ;;
            macos) ext='tar.gz' ;;
            windows) ext='exe' ;;
          esac
        fi

        echo "file-ext=$ext" >> "$GITHUB_OUTPUT"

